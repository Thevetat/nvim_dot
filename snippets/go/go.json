{
    "New Bubble": {
        "prefix": "nbub",
        "body": [
            "package tui",
            "",
            "import (",
            "\t\"strings\"",
            "",
            "\t\"github.com/charmbracelet/bubbles/key\"",
            "\ttea \"github.com/charmbracelet/bubbletea\"",
            "\t\"github.com/charmbracelet/lipgloss\"",
            "",
            "\t\"github.com/Thevetat/unfkurmac/helpers\"",
            "\t\"github.com/Thevetat/unfkurmac/tui/constants\"",
            ")",
            "",
            "type ${1:modelName} struct {",
            "\tquitting\tbool",
            "\tfooterSpace int",
            "}",
            "",
            "func InitTest() tea.Model {",
            "\tm := ${1:modelName}{}",
            "\tm.footerSpace = helpers.CalculateFooterSpace(constants.Title, m.contentView())",
            "\treturn m",
            "}",
            "",
            "func (m ${1:modelName}) Init() tea.Cmd {",
            "\treturn nil",
            "}",
            "",
            "func (m ${1:modelName}) Update(msg tea.Msg) (tea.Model, tea.Cmd) {",
            "\tvar cmd tea.Cmd",
            "\tvar cmds []tea.Cmd",
            "\tswitch msg := msg.(type) {",
            "\tcase tea.WindowSizeMsg:",
            "\t\tconstants.WindowSize = msg",
            "\t\tm.footerSpace = helpers.CalculateFooterSpace(constants.Title, m.contentView())",
            "\tcase tea.KeyMsg:",
            "\t\tswitch {",
            "\t\tcase key.Matches(msg, constants.Keymap.Main):",
            "\t\t\treturn InitWelcome(), cmd",
            "\t\tcase key.Matches(msg, constants.Keymap.Quit):",
            "\t\t\tm.quitting = true",
            "\t\t\treturn m, tea.Quit",
            "\t\t}",
            "\t\tcmds = append(cmds, cmd)",
            "\t}",
            "\treturn m, tea.Batch(cmds...)",
            "}",
            "",
            "func (m ${1:modelName}) headerView() string {",
            "\treturn constants.Title",
            "}",
            "",
            "func (m ${1:modelName}) contentView() string {",
            "\tvar b strings.Builder",
            "",
            "\tb.WriteString(\"This is some content in the test view\")",
            "",
            "\toutput := lipgloss.JoinHorizontal(lipgloss.Center, b.String())",
            "",
            "\treturn output",
            "}",
            "",
            "func (m ${1:modelName}) View() string {",
            "\tif m.quitting {",
            "\t\treturn \"\"",
            "\t}",
            "",
            "\thelpMenu := helpers.CreateHelpView(m.footerSpace, \"• info: i • main: m\")",
            "",
            "\tformatted := lipgloss.Place(",
            "\t\tconstants.WindowSize.Width,",
            "\t\tconstants.WindowSize.Height,",
            "\t\tlipgloss.Center,",
            "\t\tlipgloss.Top,",
            "\t\tlipgloss.JoinVertical(lipgloss.Center, m.headerView(), m.contentView(), helpMenu),",
            "\t)",
            "",
            "\treturn constants.DocStyle.Render(formatted)",
            "}",
            ""
        ]
    },
    "New Command": {
        "prefix": "ncmd",
        "body": [
            "type ${1:msgName} bool",
            "",
            "func ${2:funcName}() tea.Cmd {",
            "\treturn func() tea.Msg {",
            "",
            "\t\treturn ${1:msgName}()",
            "\t}",
            "}",
            ""
        ]
    },
    "New List": {
        "prefix": "nlist",
        "body": [
            "package config",
            "",
            "import (",
            "\t\"fmt\"",
            "\t\"io\"",
            "\t\"strings\"",
            "",
            "\t\"github.com/charmbracelet/bubbles/list\"",
            "\ttea \"github.com/charmbracelet/bubbletea\"",
            "",
            "\t\"github.com/Thevetat/unfkurmac/tui/constants\"",
            ")",
            "",
            "type ${1:ListName}ListItem struct{ Label string }",
            "",
            "func (i ${1:ListName}ListItem) FilterValue() string { return \"\" }",
            "",
            "type ${1:ListName}ItemDelegate struct{}",
            "",
            "func (d ${1:ListName}ItemDelegate) Height() int\t\t\t\t\t\t\t { return 1 }",
            "func (d ${1:ListName}ItemDelegate) Spacing() int\t\t\t\t\t\t\t{ return 0 }",
            "func (d ${1:ListName}ItemDelegate) Update(_ tea.Msg, _ *list.Model) tea.Cmd { return nil }",
            "",
            "func (d ${1:ListName}ItemDelegate) Render(w io.Writer, m list.Model, index int, listItem list.Item) {",
            "\ti, ok := listItem.(${1:ListName}ListItem)",
            "\tif !ok {",
            "\t\treturn",
            "\t}",
            "",
            "\tstr := fmt.Sprintf(\"%d. %s\", index+1, i.Label)",
            "",
            "\tfn := constants.ListItemStyle.Render",
            "",
            "\tif index == m.Index() {",
            "\t\tfn = func(s ...string) string {",
            "\t\t\treturn constants.ListSelectedItemStyle.Render(\"> \" + strings.Join(s, \"\"))",
            "\t\t}",
            "\t}",
            "",
            "\tfmt.Fprint(w, fn(str))",
            "}",
            "",
            "func (c *Config) get${1:ListName}ListItems() []list.Item {",
            "\titems := []list.Item{",
            "\t\t${1:ListName}ListItem{",
            "\t\t\tLabel: \"~/Git\",",
            "\t\t},",
            "\t}",
            "\treturn items",
            "}",
            ""
        ]
    }
}
